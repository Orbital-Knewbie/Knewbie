"""init db

Revision ID: 30d33d3cefe3
Revises: 
Create Date: 2020-07-17 21:55:35.165699

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '30d33d3cefe3'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('classCode', sa.String(length=6), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_group')),
    sa.UniqueConstraint('classCode', name=op.f('uq_group_classCode'))
    )
    op.create_table('topic',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_topic'))
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('firstName', sa.String(length=64), nullable=True),
    sa.Column('lastName', sa.String(length=64), nullable=True),
    sa.Column('email', sa.String(length=120), nullable=True),
    sa.Column('password_hash', sa.String(length=128), nullable=True),
    sa.Column('urole', sa.String(length=80), nullable=True),
    sa.Column('confirmed', sa.Boolean(), nullable=False),
    sa.Column('confirmed_on', sa.DateTime(), nullable=True),
    sa.Column('knewbie_id', sa.String(length=8), nullable=True),
    sa.Column('image_file', sa.String(length=20), nullable=True),
    sa.Column('admin', sa.Boolean(), nullable=False),
    sa.Column('curr_theta', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user')),
    sa.UniqueConstraint('knewbie_id', name=op.f('uq_user_knewbie_id'))
    )
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_email'), ['email'], unique=True)

    op.create_table('proficiency',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('theta', sa.Float(), nullable=True),
    sa.Column('topicID', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['topicID'], ['topic.id'], name=op.f('fk_proficiency_topicID_topic')),
    sa.ForeignKeyConstraint(['userID'], ['user.id'], name=op.f('fk_proficiency_userID_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_proficiency'))
    )
    op.create_table('question',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question', sa.String(length=255), nullable=True),
    sa.Column('discrimination', sa.Float(), nullable=True),
    sa.Column('difficulty', sa.Float(), nullable=True),
    sa.Column('guessing', sa.Float(), nullable=True),
    sa.Column('upper', sa.Float(), nullable=True),
    sa.Column('topicID', sa.Integer(), nullable=True),
    sa.Column('answerID', sa.Integer(), nullable=True),
    sa.Column('userID', sa.Integer(), nullable=True),
    sa.Column('image_file', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['topicID'], ['topic.id'], name=op.f('fk_question_topicID_topic')),
    sa.ForeignKeyConstraint(['userID'], ['user.id'], name=op.f('fk_question_userID_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_question'))
    )
    op.create_table('quiz',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=120), nullable=True),
    sa.ForeignKeyConstraint(['userID'], ['user.id'], name=op.f('fk_quiz_userID_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_quiz'))
    )
    op.create_table('thread',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('title', sa.String(length=120), nullable=True),
    sa.Column('groupID', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['groupID'], ['group.id'], name=op.f('fk_thread_groupID_group')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_thread'))
    )
    op.create_table('usergroup',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_usergroup_group_id_group')),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_usergroup_user_id_user')),
    sa.PrimaryKeyConstraint('user_id', 'group_id', name=op.f('pk_usergroup'))
    )
    op.create_table('groupquiz',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('quiz_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['group.id'], name=op.f('fk_groupquiz_group_id_group')),
    sa.ForeignKeyConstraint(['quiz_id'], ['quiz.id'], name=op.f('fk_groupquiz_quiz_id_quiz')),
    sa.PrimaryKeyConstraint('group_id', 'quiz_id', name=op.f('pk_groupquiz'))
    )
    op.create_table('option',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('qnID', sa.Integer(), nullable=True),
    sa.Column('option', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['qnID'], ['question.id'], name=op.f('fk_option_qnID_question')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_option'))
    )
    op.create_table('post',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('timestamp', sa.DateTime(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('threadID', sa.Integer(), nullable=True),
    sa.Column('userID', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['threadID'], ['thread.id'], name=op.f('fk_post_threadID_thread')),
    sa.ForeignKeyConstraint(['userID'], ['user.id'], name=op.f('fk_post_userID_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_post'))
    )
    op.create_table('questionquiz',
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('quiz_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], name=op.f('fk_questionquiz_question_id_question')),
    sa.ForeignKeyConstraint(['quiz_id'], ['quiz.id'], name=op.f('fk_questionquiz_quiz_id_quiz')),
    sa.PrimaryKeyConstraint('question_id', 'quiz_id', name=op.f('pk_questionquiz'))
    )
    op.create_table('response',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userID', sa.Integer(), nullable=True),
    sa.Column('optID', sa.Integer(), nullable=True),
    sa.Column('qnID', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['optID'], ['option.id'], name=op.f('fk_response_optID_option')),
    sa.ForeignKeyConstraint(['qnID'], ['question.id'], name=op.f('fk_response_qnID_question')),
    sa.ForeignKeyConstraint(['userID'], ['user.id'], name=op.f('fk_response_userID_user')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_response'))
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('response')
    op.drop_table('questionquiz')
    op.drop_table('post')
    op.drop_table('option')
    op.drop_table('groupquiz')
    op.drop_table('usergroup')
    op.drop_table('thread')
    op.drop_table('quiz')
    op.drop_table('question')
    op.drop_table('proficiency')
    with op.batch_alter_table('user', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_email'))

    op.drop_table('user')
    op.drop_table('topic')
    op.drop_table('group')
    # ### end Alembic commands ###
